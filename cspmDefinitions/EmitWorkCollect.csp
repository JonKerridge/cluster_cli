include "Declarations.csp"
include "Processes.csp"

-- internal channels for emit cluster
channel eTOwb: {1..emitNodes}. object
a_eTOwb = {|eTOwb|}

-- internal channels for the Work cluster
channel wTOrb: {1..workNodes}.{1..workers}
channel rbTOw:{1..workNodes}.{1..workers}.object
channel wTOwb:{1..workNodes}.object
a_workers = {|wTOrb, rbTOw|}
a_wTOwb = {|wTOwb|}

-- internal channels for collect cluster, including DataCheck
channel cTOrb: {1..collectNodes}.{1..collectors}
channel rbTOc: {1..collectNodes}.{1..collectors}.object
channel cTOdc: object

a_cTOdc = {|cTOdc|}
a_collectors = {|cTOrb, rbTOc|}

-- net transfer channel Emit Work
channel transferEW: {1..workNodes}.object
a_transferEW = {|transferEW|}

-- net transfer channel Work Collect
channel transferWC: {1..collectNodes}.object
a_transferWC = {|transferWC|}

-- net manager channels Emit Work
channel rtsEmit: {0..emitNodes}
channel useEmit: {1..emitNodes}.{1..workNodes}
channel rtrWork: {1..workNodes}
a_EWmanager = {|rtsEmit, useEmit, rtrWork|}

-- net manager channels for Work Collect 
channel rtsWork: {0..workNodes}
channel useWork: {1..workNodes}.{1..collectNodes}
channel rtrCollect:{1..collectNodes}
a_WCmanager = {|rtsWork, useWork, rtrCollect|}

-- Emit Cluster definition

Emitters() = |||n:{1..emitNodes}, e:{1..emitters} @
                Emitter(eTOwb, D.n.e.1, n, dataN)

WriteBuffersEmit() = |||n:{1..emitNodes} @
                WriteBuffer(eTOwb, rtsEmit, useEmit, transferEW, n, emitters, workNodes)

EmitCluster() = Emitters() [|a_eTOwb|] WriteBuffersEmit()

--Work cluster definitions
ReadBuffersWork() = 
    |||w:{1..workNodes} @
        ReadBuffer(wTOrb, rbTOw, transferEW, rtrWork, 
            w, workers, emitNodes, <>, workers)

Workers() = 
    |||w:{1..workNodes}, wID:{1..workers} @
        Worker(wTOrb, rbTOw, wTOwb, w, wID)

WriteBuffersWork() = 
    |||w:{1..workNodes} @
        WriteBuffer(wTOwb, rtsWork, useWork, 
            transferWC, w, workers, collectNodes)

WorkCluster() = (ReadBuffersWork() 
                    [|a_workers|] 
                Workers())
                    [|a_wTOwb|]
                WriteBuffersWork()


-- Collect Cluster definition

Collectors() = |||n:{1..collectNodes}, c:{1..collectors} @
                Collector(cTOrb, rbTOc, cTOdc, n, c)

ReadBuffersCollect() = |||n:{1..collectNodes} @
                ReadBuffer(cTOrb, rbTOc, transferWC, rtrCollect, n, collectors, workNodes, <>, collectors)

CollectCluster() = (ReadBuffersCollect() [|a_collectors|]  Collectors() )
                        [|a_cTOdc|] DataCheck(cTOdc, collectNodes * collectors, result, false)

-- create initial queues for managers
baseEWQueue = <1..workNodes>
-- 1 worker per node
ewQueue = baseEWQueue
-- 2 workers per node
--ewQueue = baseEWQueue ^ baseEWQueue
--print ewQueue

baseWCQueue = <1..collectNodes>
-- 1 collector per node
wcQueue = baseWCQueue
-- 2 collectors per node
--wcQueue = baseWCQueue ^ baseWCQueue
--print wcQueue
-- EWCsystem Definition
EWCsystem = (((EmitCluster() [|a_transferEW|] WorkCluster())
                [|a_transferWC|] CollectCluster())
                [|a_EWmanager|] Manager(rtsEmit, useEmit, rtrWork, emitNodes, ewQueue, workNodes*workers))
                [|a_WCmanager|] Manager(rtsWork, useWork, rtrCollect, workNodes, wcQueue, collectNodes*collectors)

-- Test System Definition
TestSystem = finished ! true -> TestSystem

-- following commented out for modles in refinement.csp

--assert EWCsystem :[deadlock free]
--assert EWCsystem :[deterministic]
--assert EWCsystem :[divergence free]

--assert (EWCsystem \ {|eTOwb, transferEW, rtsEmit, useEmit, rtrWork, wTOrb, rbTOw, wTOwb,
--                        rtsWork, useWork, rtrCollect,
--                        transferWC, cTOrb, rbTOc, cTOdc|}) [T=TestSystem
--assert (EWCsystem \ {|eTOwb, transferEW, rtsEmit, useEmit, rtrWork, wTOrb, rbTOw, wTOwb,
--                        rtsWork, useWork, rtrCollect,
--                        transferWC, cTOrb, rbTOc, cTOdc|}) [F=TestSystem
--assert (EWCsystem \ {|eTOwb, transferEW, rtsEmit, useEmit, rtrWork, wTOrb, rbTOw, wTOwb, 
--                        rtsWork, useWork, rtrCollect,
--                        transferWC, cTOrb, rbTOc, cTOdc|}) [FD=TestSystem

